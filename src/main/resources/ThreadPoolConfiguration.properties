# CPU密集型任务
#　　经验公式：线程数 = CPU核心数 + 1
#　　为什么要设置成 核心数+1 ？理想情况是设置成核心数，这样每个核都在计算，避免线程切换导致开销。但一般会出现中断等情况，这样就会有核心空闲，所以一般设置成 核心数+1 ，以最大程度利用CPU资源。
#　　Java中可以通过Runtime.getRuntime().availableProcessors()获取CPU核心数。
# IO密集型任务
#　　经验公式：线程数 = 2 * CPU核心数
# 混合型任务
#　　经验公式：线程数 = N * U * ( 1 + WT/ST )
#         N：CPU核心数
#         U：目标CPU利用率
#         WT：线程等待时间
#         ST：线程运行时间

#视频切片线程池--混合型
videoSliceThreadPool.name=VideoSliceThreadPool
videoSliceThreadPool.corePoolSize=5
videoSliceThreadPool.maximumPoolSize=6
videoSliceThreadPool.keepAliveTimeSecond=60 
videoSliceThreadPool.workQueueLength=3000
videoSliceThreadPool.shutdownWaitTimeSecond=7

#数据库线程池--IO密集型
databaseThreadPool.name=DatabaseIOThreadPool
databaseThreadPool.corePoolSize=8
databaseThreadPool.maximumPoolSize=15
databaseThreadPool.keepAliveTimeSecond=60 
databaseThreadPool.workQueueLength=15000
databaseThreadPool.shutdownWaitTimeSecond=7

#回收线程池--IO密集型
recycleThreadPool.name=RecycleThreadPool
recycleThreadPool.corePoolSize=6
recycleThreadPool.maximumPoolSize=15
recycleThreadPool.keepAliveTimeSecond=20 
recycleThreadPool.workQueueLength=12000
recycleThreadPool.shutdownWaitTimeSecond=7

#定时回收线程池
scheduledRecycleThreadPool.corePoolSize=2
scheduledRecycleThreadPool.shutdownWaitTimeSecond=7